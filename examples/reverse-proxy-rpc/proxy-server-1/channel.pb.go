// Code generated by protoc-gen-go. DO NOT EDIT.
// source: channel.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	channel.proto

It has these top-level messages:
	BytesValue
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BytesValue struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *BytesValue) Reset()                    { *m = BytesValue{} }
func (m *BytesValue) String() string            { return proto.CompactTextString(m) }
func (*BytesValue) ProtoMessage()               {}
func (*BytesValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BytesValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*BytesValue)(nil), "main.BytesValue")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PilotManager service

type PilotManagerClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (PilotManager_ChannelClient, error)
}

type pilotManagerClient struct {
	cc *grpc.ClientConn
}

func NewPilotManagerClient(cc *grpc.ClientConn) PilotManagerClient {
	return &pilotManagerClient{cc}
}

func (c *pilotManagerClient) Channel(ctx context.Context, opts ...grpc.CallOption) (PilotManager_ChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PilotManager_serviceDesc.Streams[0], c.cc, "/main.PilotManager/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &pilotManagerChannelClient{stream}
	return x, nil
}

type PilotManager_ChannelClient interface {
	Send(*BytesValue) error
	Recv() (*BytesValue, error)
	grpc.ClientStream
}

type pilotManagerChannelClient struct {
	grpc.ClientStream
}

func (x *pilotManagerChannelClient) Send(m *BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pilotManagerChannelClient) Recv() (*BytesValue, error) {
	m := new(BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PilotManager service

type PilotManagerServer interface {
	Channel(PilotManager_ChannelServer) error
}

func RegisterPilotManagerServer(s *grpc.Server, srv PilotManagerServer) {
	s.RegisterService(&_PilotManager_serviceDesc, srv)
}

func _PilotManager_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PilotManagerServer).Channel(&pilotManagerChannelServer{stream})
}

type PilotManager_ChannelServer interface {
	Send(*BytesValue) error
	Recv() (*BytesValue, error)
	grpc.ServerStream
}

type pilotManagerChannelServer struct {
	grpc.ServerStream
}

func (x *pilotManagerChannelServer) Send(m *BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pilotManagerChannelServer) Recv() (*BytesValue, error) {
	m := new(BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PilotManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.PilotManager",
	HandlerType: (*PilotManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _PilotManager_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "channel.proto",
}

func init() { proto.RegisterFile("channel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x48, 0xcc,
	0xcb, 0x4b, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53,
	0x52, 0xe2, 0xe2, 0x72, 0xaa, 0x2c, 0x49, 0x2d, 0x0e, 0x4b, 0xcc, 0x29, 0x4d, 0x15, 0x12, 0xe1,
	0x62, 0x2d, 0x03, 0x31, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x20, 0x1c, 0x23, 0x47, 0x2e,
	0x9e, 0x80, 0xcc, 0x9c, 0xfc, 0x12, 0xdf, 0xc4, 0xbc, 0xc4, 0xf4, 0xd4, 0x22, 0x21, 0x43, 0x2e,
	0x76, 0x67, 0x88, 0x51, 0x42, 0x02, 0x7a, 0x20, 0x53, 0xf4, 0x10, 0x46, 0x48, 0x61, 0x88, 0x68,
	0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0xed, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc3,
	0x4e, 0xfc, 0x84, 0x00, 0x00, 0x00,
}
